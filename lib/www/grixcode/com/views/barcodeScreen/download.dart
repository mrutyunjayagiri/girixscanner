import 'dart:io';

import 'package:barcode_image/barcode_image.dart';
import 'package:flutter/material.dart';
import 'package:girixscanner/www/grixcode/com/config/config.dart';
import 'package:girixscanner/www/grixcode/com/models/barcode/barcode.dart';
import 'package:girixscanner/www/grixcode/com/scopedModel/main_model.dart';
import 'package:image/image.dart' as im;
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:permission_handler/permission_handler.dart';
import 'package:printing/printing.dart';

class DownloadBarcode extends StatelessWidget {
  final Map<String, dynamic> dataSet;
  final BarcodeInfo barcodeInfo;
  final MainModel model;

  DownloadBarcode({this.dataSet, this.barcodeInfo, this.model});

  Widget _button(IconData icon, String text, VoidCallback onPressed) {
    return RaisedButton(
        child: Row(
          children: [
            Icon(icon),
            const SizedBox(width: 8),
            Text(text),
          ],
        ),
        onPressed: onPressed);
  }

  @override
  Widget build(BuildContext context) {
    if (!barcodeInfo.barcode.isValid(dataSet['secret_data'])) {
      return const Text("Invalid Barcode data");
    }

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 20),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _button(Icons.file_download, 'SVG', _exportSvg),
          _button(Icons.file_download, 'PNG', _exportPng),
          _button(Icons.file_download, 'PDF', () => _exportPdf(context)),
        ],
      ),
    );
  }

  Future<bool> _checkPermission() async {
    PermissionStatus status = await Permission.storage.status;
    if (status.isGranted) {
      return true;
    } else {
      PermissionStatus _requestStatus = await Permission.storage.request();
      if (_requestStatus.isGranted)
        return true;
      else
        _checkPermission();
    }
    return false;
  }

  void _exportPdf(BuildContext context) async {
    // Check Permission
    bool isPermission = await _checkPermission();
    if (!isPermission) {
      print("Permission Required");
      return;
    }

    final bc = barcodeInfo.barcode;
    final pdf = pw.Document(
      author: '${model.user.name}',
      keywords: 'barcode, dart, ${barcodeInfo.barcode.name}',
      subject: barcodeInfo.barcode.name,
      title: '${dataSet['name']}',
    );
    const scale = 5.0;

    final PdfImage assetImage = await pdfImageFromImageProvider(
      pdf: pdf.document,
      image: const AssetImage('assets/logo/gs_logo.png'),
    );

    pdf.addPage(pw.Page(
      build: (context) =>
          pw.Center(
            child: pw.Column(children: [
              pw.Row(children: [pw.Image(assetImage, height: 50, width: 90)]),
//          pw.Header(text: APP_NAME, level: 3),
              pw.Spacer(),
              pw.Text("Data: ${dataSet['secret_data']}",
                  style: pw.TextStyle(
                      fontSize: 35.0, color: PdfColor.fromHex("000000"))),
              pw.Spacer(),
              pw.BarcodeWidget(
                barcode: bc,
                data: dataSet['secret_data'],
                width: dataSet['width'] * PdfPageFormat.mm / scale,
                height: dataSet['height'] * PdfPageFormat.mm / scale,
                textStyle: pw.TextStyle(
                  fontSize: dataSet['font'] * PdfPageFormat.mm / scale,
                ),
              ),
              pw.Spacer(),
              pw.Paragraph(text: barcodeInfo.description),
              pw.Spacer(),
              pw.Align(
                alignment: pw.Alignment.centerRight,
                child: pw.RichText(
                  text: pw.TextSpan(
                    text: 'Pdf generated by $APP_NAME\nFor more info visit',
                    children: [
                      pw.TextSpan(
                        text: 'https://codingbhai.com/about',
                        annotation: pw.AnnotationUrl(
                          'https://codingbhai.com/about',
                        ),
                        style: const pw.TextStyle(
                          color: PdfColors.blue,
                          decoration: pw.TextDecoration.underline,
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ]),
          ),
    ));

    final DateTime _date = DateTime.now();
    final current =
        "${_date.hour}${_date.minute}${_date.second}${_date.millisecond}";
    print(current);

    final file =
    File('${await getExternalPath()}/${dataSet['name']}_${current}.pdf');
    file.writeAsBytesSync(pdf.save());
    Navigator.of(context).pop(true);
  }

  Future<String> getExternalPath() async {
    final Directory _directory = await getExternalStorageDirectory();
    final exPath = _directory.path.split('0')[0] + "0/$APP_NAME/documents";
    print("Saved Path: $exPath");
    await Directory('$exPath').create(recursive: true);
    return exPath;
  }

  void _exportPng() {
    final bc = barcodeInfo.barcode;
    final image =
    im.Image(dataSet['width'].toInt() * 2, dataSet['height'].toInt() * 2);
    im.fill(image, im.getColor(255, 255, 255));
    drawBarcode(image, bc, dataSet['secret_data'], font: im.arial_48);
    final data = im.encodePng(image);

//    share(
//      bytes: Uint8List.fromList(data),
//      filename: '${bc.name}.png',
//      mimetype: 'image/png',
//    );
  }

  void _exportSvg() {
    final bc = barcodeInfo.barcode;

    final data = bc.toSvg(
      dataSet['secret_data'],
      width: dataSet['width'],
      height: dataSet['height'],
      fontHeight: dataSet['font'],
    );

//    share(
//      bytes: Uint8List.fromList(utf8.encode(data)),
//      filename: '${bc.name}.svg',
//      mimetype: 'image/svg+xml',
//    );
  }
}

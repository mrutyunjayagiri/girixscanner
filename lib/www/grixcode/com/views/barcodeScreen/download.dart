import 'dart:io';

import 'package:flutter/material.dart';
import 'package:girixscanner/www/grixcode/com/config/config.dart';
import 'package:girixscanner/www/grixcode/com/models/barcode/barcode.dart';
import 'package:girixscanner/www/grixcode/com/scopedModel/main_model.dart';
import 'package:girixscanner/www/grixcode/com/utils/barcode/barcode.dart';
import 'package:girixscanner/www/grixcode/com/utils/utility.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:permission_handler/permission_handler.dart';
import 'package:printing/printing.dart';

class DownloadBarcode extends StatelessWidget {
  final Map<String, dynamic> dataSet;
  final BarcodeInfo barcodeInfo;
  final MainModel model;

  DownloadBarcode({this.dataSet, this.barcodeInfo, this.model});

  Widget _button(IconData icon, String text, VoidCallback onPressed) {
    return RaisedButton.icon(
        padding: EdgeInsets.all(12.0),
        elevation: 0.0,
        icon: Icon(icon),
        color: Colors.grey[200],
        shape:
            OutlineInputBorder(borderSide: BorderSide(color: Colors.black12)),
        label: Text(text),
        onPressed: onPressed);
  }

  @override
  Widget build(BuildContext context) {
    if (!barcodeInfo.barcode.isValid(dataSet['secret_data'])) {
      return const Text("Invalid Barcode data");
    }

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 20),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          Expanded(
              child: _button(
                  Icons.file_download, 'SVG', () => _exportSvg(context))),
          const SizedBox(
            width: 5,
          ),
          Expanded(
              child: _button(
                  Icons.file_download, 'PNG', () => _exportPng(context))),
          const SizedBox(
            width: 5,
          ),
          Expanded(
              child: _button(
                  Icons.file_download, 'PDF', () => _exportPdf(context))),
        ],
      ),
    );
  }

  Future<bool> _checkPermission() async {
    PermissionStatus status = await Permission.storage.status;
    if (status.isGranted) {
      return true;
    } else {
      PermissionStatus _requestStatus = await Permission.storage.request();
      if (_requestStatus.isGranted)
        return true;
      else
        _checkPermission();
    }

    return false;
  }

  Future<String> _getExternalPath() async {
    return AppUtility.getExternalDocumentPath();
  }

  void _exportPdf(BuildContext context) async {
    // Check Permission
    bool isPermission = await _checkPermission();
    if (!isPermission) {
      print("Permission Required");
      Navigator.of(context).pop(false);

      return;
    }

    final bc = barcodeInfo.barcode;
    final pdf = pw.Document(
      author: '${model.user.name}',
      keywords: 'barcode, dart, ${barcodeInfo.barcode.name}',
      subject: barcodeInfo.barcode.name,
      title: '${dataSet['name']}',
    );
    const scale = 5.0;

    final PdfImage assetImage = await pdfImageFromImageProvider(
      pdf: pdf.document,
      image: const AssetImage('assets/logo/gs_logo.png'),
    );

    pdf.addPage(pw.Page(
      build: (context) => pw.Center(
        child: pw.Column(children: [
          pw.Row(children: [pw.Image(assetImage, height: 50, width: 90)]),
//          pw.Header(text: APP_NAME, level: 3),
          pw.Spacer(),
          pw.Text("Data: ${dataSet['secret_data']}",
              style: pw.TextStyle(
                  fontSize: 35.0, color: PdfColor.fromHex("000000"))),
          pw.Spacer(),
          pw.BarcodeWidget(
            barcode: bc,
            data: dataSet['secret_data'],
            width: dataSet['width'] * PdfPageFormat.mm / scale,
            height: dataSet['height'] * PdfPageFormat.mm / scale,
            textStyle: pw.TextStyle(
              fontSize: dataSet['font'] * PdfPageFormat.mm / scale,
            ),
          ),
          pw.Spacer(),
          pw.Paragraph(text: barcodeInfo.description),
          pw.Spacer(),
          pw.Align(
            alignment: pw.Alignment.centerRight,
            child: pw.RichText(
              text: pw.TextSpan(
                text: 'Pdf generated by $APP_NAME\nFor more info visit',
                children: [
                  pw.TextSpan(
                    text: 'https://codingbhai.com/about',
                    annotation: pw.AnnotationUrl(
                      'https://codingbhai.com/about',
                    ),
                    style: const pw.TextStyle(
                      color: PdfColors.blue,
                      decoration: pw.TextDecoration.underline,
                    ),
                  )
                ],
              ),
            ),
          ),
        ]),
      ),
    ));

    final _fileName = BarcodeUtility.fileName(dataSet['name']);
    final file = File('${await _getExternalPath()}/${_fileName}.pdf');
    file.writeAsBytesSync(pdf.save());
    Navigator.of(context).pop(true);
  }

  void _exportPng(BuildContext context) async {
    // Check Permission
    bool isPermission = await _checkPermission();
    if (!isPermission) {
      print("Permission Required");
      Navigator.of(context).pop(false);

      return;
    }

    final bc = barcodeInfo.barcode;
    final data = await BarcodeUtility.getBarcodePng(bc, dataSet);
    final _fileName = BarcodeUtility.fileName(dataSet['name']);
    final File _pngFile = File("${await _getExternalPath()}/$_fileName.png");
    await _pngFile.writeAsBytesSync(data, mode: FileMode.write);
    Navigator.of(context).pop(true);

//    share(
//      bytes: Uint8List.fromList(data),
//      filename: '${bc.name}.png',
//      mimetype: 'image/png',
//    );
  }

  void _exportSvg(BuildContext context) async {
    // Check Permission
    bool isPermission = await _checkPermission();
    if (!isPermission) {
      print("Permission Required");
      Navigator.of(context).pop(false);
      return;
    }

    final bc = barcodeInfo.barcode;

    final data = bc.toSvg(
      dataSet['secret_data'],
      width: dataSet['width'],
      height: dataSet['height'],
      fontHeight: dataSet['font'],
    );
    final _fileName = BarcodeUtility.fileName(dataSet['name']);

    final File svgFile = File("${await _getExternalPath()}/$_fileName.svg");
    await svgFile.writeAsStringSync(data, mode: FileMode.write);
    Navigator.of(context).pop(true);
  }
}
